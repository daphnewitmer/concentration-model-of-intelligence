import matplotlib.pyplot as pltimport numpy as npfrom src import parameters as paramsdef check_knowledge_structure(simulation):    # TODO: make usable for test_matrix as well    for person in range(1):        cog_cap = simulation.get_cog_cap(person)        plt.plot(np.arange(params.nrOfMicroskillsNormal), simulation.knowledge_matrix[:, 0], label='Required Cognitive Capacity')        plt.plot(np.arange(params.nrOfMicroskillsNormal), cog_cap, label='Person (p=' + str(person) + ') Cognitive Capacity')        plt.xlabel('Microskills')        plt.ylabel('Cognitive Capacity')        plt.title('Knowledge Structure')        plt.legend()        plt.show()    # TODO: check this    knowledge_without_cog_cap = simulation.knowledge_matrix[: ,1:]    similarity_matrix = knowledge_without_cog_cap.dot(knowledge_without_cog_cap.T)    sum_knowl_array = similarity_matrix.sum(axis=0)    plt.plot(np.arange(params.nrOfMicroskillsNormal), sum_knowl_array)    plt.xlabel('Microskills')    plt.ylabel('Sum Knowledge')    plt.title('Variation Between Item Connectedness')    plt.show()def check_learning_structure(learning_matrix):    learning_matrix_selected_persons = learning_matrix[:-100, :10]  # microskill, person    for person in range(len(learning_matrix_selected_persons[0, :])):        learned_microskills_per_timepoint = []        learned_person = learning_matrix_selected_persons[:, person:person+1].sum(axis=1)        for microskill in range(len(learned_person)):            learned_microskills_per_timepoint.append(int(learned_person[0:microskill].sum()))        plt.plot(learned_microskills_per_timepoint, label='Person: ' + str(person))    plt.xlabel('Timepoints')    plt.ylabel('Nr of Learned Microskills')    plt.title('Microskills Learned per Timepoint')    plt.legend()    plt.show()    # TODO: second and third part of section