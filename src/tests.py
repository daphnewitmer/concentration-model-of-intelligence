import matplotlib.pyplot as pltimport numpy as npfrom src import parameters as paramsdef check_knowledge_structure(simulation):    # TODO: split upt in two function + one function for test and knowledge?    for person in range(1):        cog_cap = simulation.get_cog_cap(person)        plt.plot(np.arange(params.nrOfMicroskillsNormal), simulation.knowledge_matrix[:, 0], label='Required Cognitive Capacity')        plt.plot(np.arange(params.nrOfMicroskillsNormal), cog_cap, label='Person (p=' + str(person) + ') Cognitive Capacity')        plt.xlabel('Microskills')        plt.ylabel('Cognitive Capacity')        plt.title('Knowledge Structure')        plt.legend()        plt.show()    # TODO: check this    knowledge_without_cog_cap = simulation.knowledge_matrix[: ,1:]    similarity_matrix = knowledge_without_cog_cap.dot(knowledge_without_cog_cap.T)    sum_knowl_array = similarity_matrix.sum(axis=0)    plt.plot(np.arange(params.nrOfMicroskillsNormal), sum_knowl_array)    plt.xlabel('Microskills')    plt.ylabel('Sum Knowledge')    plt.title('Variation Between Item Connectedness')    plt.show()def check_test_structure(simulation):    # TODO: split upt in two function + one function for test and knowledge?    for person in range(1):        cog_cap = simulation.get_cog_cap(person)        test_timepoint = int((params.nrOfTestOccasions / params.TOTAL_YEARS_OF_SIMULATION) * params.TEST_AGE)        plt.plot(np.arange(params.nrOfMicroskillsIQ), simulation.test_matrix[:, 0],                 label='Required Cognitive Capacity')        plt.plot(np.arange(params.nrOfMicroskillsIQ), cog_cap[test_timepoint : int(test_timepoint + 100)],                 label='Person (p=' + str(person) + ') Cognitive Capacity')        plt.xlabel('Microskills')        plt.ylabel('Cognitive Capacity')        plt.title('Test Structure')        plt.legend()        plt.show()        # TODO: check this        test_without_cog_cap = simulation.test_matrix[:, 1:]        similarity_matrix = test_without_cog_cap.dot(test_without_cog_cap.T)        sum_knowl_array = similarity_matrix.sum(axis=0)        plt.plot(np.arange(params.nrOfMicroskillsIQ), sum_knowl_array)        plt.xlabel('Microskills')        plt.ylabel('Sum Knowledge')        plt.title('Variation Between Item Connectedness IQ test')        plt.show()def check_learning_structure(simulation, learning_matrix):    start_p = int(0)    last_p = int(10)    learning_matrix_selected_persons = learning_matrix[:-100, start_p:last_p]  # microskill, person    for person in range(len(learning_matrix_selected_persons[0, :])):        learned_microskills_per_timepoint = []        learned_person = learning_matrix_selected_persons[:, person:person+1].sum(axis=1)        for microskill in range(len(learned_person)):            sum_trues = (int(learned_person[0:microskill].sum()))            learned_microskills_per_timepoint.append(sum_trues)        plt.plot(learned_microskills_per_timepoint, label='Person: ' + str(person))    plt.title("Microskills Learned per Timepoint")    plt.xlabel('Timepoints')    plt.ylabel('Nr of Learned Microskills')    plt.legend()    plt.show()def check_learning_correlations(simulation, learning_matrix):    # TODO: safe concentration from simulation? + cross correlation? + more than one person?    # TODO: We then check whether, if the proportion of microskills offered at the right age (set at 50%) above goes to    #  a lower percentage, less is learned.    start_p = int(0)    last_p = int(1)    learning_matrix_selected_persons = learning_matrix[:-100, start_p:last_p]  # microskill, person    for person in range(len(learning_matrix_selected_persons[0, :])):        person_cog_cap = simulation.get_cog_cap(person)        cog_cap_corr = []        conc_corr = []        learned_person = learning_matrix_selected_persons[:, person:person + 1].sum(axis=1)        for microskill in range(len(learned_person)):            sum_trues = (int(learned_person[0:microskill].sum()))            cur_cog_cap = person_cog_cap[microskill]            cur_conc = simulation.get_concentration(person)            cog_cap_corr.append(np.correlate([sum_trues], [cur_cog_cap]))            conc_corr.append(np.correlate([sum_trues], [cur_conc]))        plt.plot(cog_cap_corr, label='Cog Cap ' + str(person))        plt.plot(conc_corr, label='Conc ' + str(person))    plt.title("Correlation with sum_knowl")    plt.xlabel('Timepoints')    plt.ylabel('Correlation')    plt.legend()    plt.show()def check_iq_scores(learning_matrix):    # TODO: Calulcate iq scores (check variance, and correlation + factor analysis)    start_p = int(0)    last_p = int(5)    IQ_test_selected_persons = learning_matrix[1000:, start_p:last_p]  # microskill, person    raw_iq_scores = []    for person in range(len(IQ_test_selected_persons[0, :])):        score_person = IQ_test_selected_persons[:, person:person+1].sum(axis=1)        raw_iq_scores.append(score_person.sum())    plt.bar(np.arange(len(raw_iq_scores)), raw_iq_scores)    plt.title("Raw IQ-test Scores")    plt.xlabel('Persons')    plt.ylabel('Nr of Items Passed')    plt.legend()    plt.show()