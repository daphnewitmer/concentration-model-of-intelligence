import matplotlib.pyplot as pltimport numpy as npfrom src import parameters as paramsclass Test:    def __init__(self, simulation, learning_matrix):        self.simulation = simulation        self.learning_matrix = learning_matrix    def run(self):        fig, axs = plt.subplots(2, 4)        self.check_knowledge_structure(axs, (0, 0))        self.check_item_variation('knowledge', axs, (0, 1))  # knowledge or test        self.check_item_variation('test', axs, (0, 2))  # knowledge or test        self.check_test_structure(axs, (0, 3))        self.check_learning_structure(axs, (1, 0))        self.check_learning_correlations(axs, (1, 1))        self.check_iq_scores(axs, (1, 2), 'cog_cap')        self.check_iq_scores(axs, (1, 3), 'concentration')        plt.show()    def check_knowledge_structure(self, axs, place):        # TODO: one function for test and knowledge?        for person in range(2):            cog_cap = self.simulation.get_cog_cap(person)            axs[place].plot(np.arange(params.nrOfMicroskillsNormal), cog_cap, label='Person (p=' + str(person) + ') Cognitive Capacity')        axs[place].plot(np.arange(params.nrOfMicroskillsNormal),                 self.simulation.knowledge_matrix[:, 0],                 label='Required Cognitive Capacity',                 zorder=0,                 color='paleturquoise')        axs[place].set_xlabel('Microskills')        axs[place].set_ylabel('Cognitive Capacity')        axs[place].set_title('Knowledge Structure')        axs[place].legend()    def check_item_variation(self, matrix, axs, place):        # TODO: check this        if matrix == 'test':            matrix = self.simulation.test_matrix            title = 'Variation Between Item Connectedness IQ test'        elif matrix == 'knowledge':            matrix = self.simulation.knowledge_matrix            title = 'Variation Between Item Connectedness'        matrix_without_cog_cap = matrix[:, 1:]        similarity_matrix = matrix_without_cog_cap.dot(matrix_without_cog_cap.T)        sum_knowl_array = similarity_matrix.sum(axis=0)        axs[place].plot(sum_knowl_array)        axs[place].set_xlabel('Microskills')        axs[place].set_ylabel('Sum Knowledge')        axs[place].set_title(title)    def check_test_structure(self, axs, place):        # TODO: one function for test and knowledge?        for person in range(1):            cog_cap = self.simulation.get_cog_cap(person)            test_timepoint = int((params.nrOfTestOccasions / params.TOTAL_YEARS_OF_SIMULATION) * params.TEST_AGE)            axs[place].plot(np.arange(params.nrOfMicroskillsIQ), self.simulation.test_matrix[:, 0],                     label='Required Cognitive Capacity')            axs[place].plot(np.arange(params.nrOfMicroskillsIQ), cog_cap[test_timepoint:int(test_timepoint + 100)],                     label='Person (p=' + str(person) + ') Cognitive Capacity')        axs[place].set_xlabel('Microskills')        axs[place].set_ylabel('Cognitive Capacity')        axs[place].set_title('Test Structure')        axs[place].legend()    def check_learning_structure(self, axs, place):        start_p = int(0)        last_p = int(10)        learning_matrix_without_test_select_pers = self.learning_matrix[:-100, start_p:last_p]  # microskill, person        sum_knowl_matrix = np.cumsum(learning_matrix_without_test_select_pers, axis=0)        for person in range(last_p):            axs[place].plot(sum_knowl_matrix[:, person], label='Person: ' + str(person))        axs[place].set_title("Microskills Learned per Timepoint")        axs[place].set_xlabel('Timepoints')        axs[place].set_ylabel('Nr of Learned Microskills')        axs[place].legend()    def check_learning_correlations(self, axs, place):        # TODO: We then check whether, if the proportion of microskills offered at the right age (set at 50%) above goes to        #  a lower percentage, less is learned.        learning_matrix_without_test = self.learning_matrix[:-100, :]  # microskill, person        sum_knowl_matrix = np.cumsum(learning_matrix_without_test, axis=0)        corr_sum_knowl_conc = []        corr_sum_knowl_cog_cap = []        for microskill in range(1000):            corr_conc = np.corrcoef(sum_knowl_matrix[microskill, :], self.simulation.concentration_matrix[microskill, :])[0, 1]            corr_sum_knowl_conc.append(corr_conc)            corr_cog_cap = np.corrcoef(sum_knowl_matrix[microskill, :], self.simulation.cog_cap_matrix[microskill, :])[0, 1]            corr_sum_knowl_cog_cap.append(corr_cog_cap)        axs[place].plot(corr_sum_knowl_conc, label='Concentration')        axs[place].plot(corr_sum_knowl_cog_cap, label='Cog cap')        axs[place].set_title("Correlation With Sum Knowledge")        axs[place].set_xlabel('Timepoints')        axs[place].set_ylabel('Correlation')        axs[place].legend()    def check_iq_scores(self, axs, place, characteristic):        # TODO: Calulcate iq scores (check variance, and correlation + factor analysis) + take correlation at timepoint of test?        # TODO: correlation scores        start_p = int(0)        last_p = params.nrOfPersInTest        cog_cap_all = self.simulation.personality_matrix[start_p:last_p, 0]        conc_all = self.simulation.personality_matrix[start_p:last_p, 1]        IQ_test_selected_persons = self.learning_matrix[1000:, start_p:last_p]  # microskill, person        raw_iq_scores = IQ_test_selected_persons.sum(axis=0)        corr_cog_cap = np.corrcoef(raw_iq_scores, cog_cap_all)[0, 1]  # person, charchateristic        corr_conc = np.corrcoef(raw_iq_scores, conc_all)[0, 1]  # person, charachteristic        if characteristic == 'cog_cap':            fit1 = np.polyfit(raw_iq_scores, cog_cap_all, deg=1)            axs[place].plot(raw_iq_scores,  cog_cap_all, 'bo')            axs[place].plot(raw_iq_scores, fit1[0] * raw_iq_scores + fit1[1])            axs[place].set_title('Correlation IQ and Cognitive Capacity: ' + str(round(corr_cog_cap, 2)))            axs[place].set_xlabel('Raw IQ Scores')            axs[place].set_ylabel('Cognitive Capacity')        if characteristic == 'concentration':            fit2 = np.polyfit(raw_iq_scores, conc_all, deg=1)            axs[place].plot(raw_iq_scores, conc_all, 'bo')            axs[place].plot(raw_iq_scores, fit2[0] * raw_iq_scores + fit2[1])            axs[place].set_title('Correlation IQ and concentration: ' + str(round(corr_conc, 2)))            axs[place].set_xlabel('Raw IQ Scores')            axs[place].set_ylabel('Concentration')        # print('Variance: ' + str(np.var(raw_iq_scores)))        #        # plt.bar(np.arange(len(raw_iq_scores)), raw_iq_scores)        # plt.xticks(np.arange(len(raw_iq_scores)), rotation=90)        # plt.title("Raw IQ-test Scores")        # plt.xlabel('Persons')        # plt.ylabel('Nr of Items Passed')        # plt.show()